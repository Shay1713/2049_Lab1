/************** ECE2049 Lab1 CODE ******************/
/**************  28 March 2023   ******************/
/***************************************************/

/* Peripherals.c and .h are where the functions that implement
 * the LEDs and keypad, etc are.*/
#include <msp430.h>
#include "peripherals.h"
#include <stdio.h>
#include <stdlib.h>


// Declare globals here

int randomNum;
int numMax = 4;
int c = 0; // counter
int cChecker; // counter
int arrayIndex = 0; // position in user array
int arrayIndexP = 0; // position in pattern array
int sequenceMax = 1; // max game length
char playerButton;
unsigned char patternArray[] = {}; // random led pattern
unsigned char userArray[] = {}; //saves user press button data
unsigned char currKey=0, dispSz = 3; // DO NOT CHANGE
unsigned char dispThree[3]; // DO NOT CHANGE
//unsigned char arrayLengthU = sizeof(userArray)/sizeof(userArray[0]); // for length of user array ?
//unsigned char arrayLengthP = sizeof(patternArray)/sizeof(patternArray[0]); // for length of pattern array ?



// Function Prototypes
void swDelay(char numLoops);
void incPatternDisp (); // incrementing and displaying pattern
void clearingPatternUserArrays(); // if player loses, resetting arrays
void checkIfEqual();


// Main
void main(void)
{


    // Useful code starts here

    WDTCTL = WDTPW | WDTHOLD;    // Stop watchdog timer. Always need to stop this!!


    initLeds();
    configDisplay();
    configKeypad();

    // *** Intro Screen ***
    Graphics_clearDisplay(&g_sContext); // Clear the display
    Graphics_drawStringCentered(&g_sContext, "SIMON", AUTO_STRING_LENGTH, 48, 15, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, "Press *", AUTO_STRING_LENGTH, 48, 25, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, "to begin", AUTO_STRING_LENGTH, 48, 35, TRANSPARENT_TEXT);

    //Graphics_Rectangle box = {.xMin = 5, .xMax = 91, .yMin = 5, .yMax = 91 };
    //Graphics_drawRectangle(&g_sContext, &box);

    Graphics_flushBuffer(&g_sContext);
    dispThree[0] = ' ';
    dispThree[2] = ' ';


    // check console stuff here


        while (1)    // Forever loop
           {

               // Check if any keys have been pressed on the 3x4 keypad
               currKey = getKey();
               if (currKey == '*'){ // counting down
                   setLeds('3' - 0x30);
                   BuzzerOn();
                   Graphics_drawStringCentered(&g_sContext, "3", AUTO_STRING_LENGTH, 10, 55, TRANSPARENT_TEXT);
                   Graphics_flushBuffer(&g_sContext);
                   swDelay(2);
                   BuzzerOff();
                   swDelay(2);
                   setLeds('2' - 0x30);
                   BuzzerOn();
                   Graphics_drawStringCentered(&g_sContext, "2", AUTO_STRING_LENGTH, 30, 55, TRANSPARENT_TEXT);
                   Graphics_flushBuffer(&g_sContext);
                   swDelay(2);
                   BuzzerOff();
                   swDelay(2);
                   setLeds('1' - 0x30);
                   BuzzerOn();
                   Graphics_drawStringCentered(&g_sContext, "1", AUTO_STRING_LENGTH, 50, 55, TRANSPARENT_TEXT);
                   Graphics_flushBuffer(&g_sContext);
                   swDelay(2);
                   BuzzerOff();
                   swDelay(2);
                   setLeds('*'-0x30);
                   BuzzerOn();
                   Graphics_drawStringCentered(&g_sContext, "GO", AUTO_STRING_LENGTH, 70, 55, TRANSPARENT_TEXT);
                   Graphics_flushBuffer(&g_sContext);
                   swDelay(2);
                   BuzzerOff();
                   setLeds(0);
                   swDelay(2);
                   // calling first round to LCD screen
                   Graphics_clearDisplay(&g_sContext); // preparing to prompt the user
                   Graphics_flushBuffer(&g_sContext);
                   incPatternDisp(); // displaying pattern to user
                   Graphics_clearDisplay(&g_sContext); // clearing pattern numbers
                   Graphics_drawStringCentered(&g_sContext, "Repeat", AUTO_STRING_LENGTH, 48, 25, TRANSPARENT_TEXT); // instructing player
                   Graphics_flushBuffer(&g_sContext);


               }
               if (currKey == '1'){
                   setLeds(currKey - 0x30);
               }
               if (currKey == '2'){
                  setLeds(currKey - 0x30);
               }
               if (currKey == '3'){
                   setLeds(currKey - 0x30);
               }
               if (currKey == '4'){
                   setLeds(currKey - 0x30);
               }
               if (currKey == '9'){
                   setLeds(currKey - 0x30);
               }
               if (currKey == '0'){
                   setLeds('8' - 0x30);
               }


               // other than button functions
               if ( (arrayIndex == arrayIndexP) && (arrayIndex>0) ) { // would prompt array check if both same length 
                  checkIfEqual();
               }
               if (sequenceMax==40){ // setting game limit max rounds
                   Graphics_clearDisplay(&g_sContext); // Clear the display
                   Graphics_drawStringCentered(&g_sContext, "YOU WIN", AUTO_STRING_LENGTH, 48, 15, TRANSPARENT_TEXT);
                   Graphics_flushBuffer(&g_sContext);
                   swDelay(10);
                   sequenceMax=1; // resetting game rounds
               }


               if (currKey) // back to the buttons 
               {
                   dispThree[1] = currKey;
                   if ((currKey >= '5') && (currKey <= '8')){
                       setLeds(0);
                       printf("Button 5-8 pressed\n");
                   }
                   if (currKey == '1'){
                       userArray[arrayIndexP] = currKey;
                       Graphics_drawStringCentered(&g_sContext, dispThree, dispSz, 20, 55, OPAQUE_TEXT);
                       printf("Button 1 pressed\n");
                       printf("sequenceMax pressed 1 is: %d\n", sequenceMax);
                       arrayIndexP++;
                       printf("userArray is %c and arrayIndexP is %d\n ", userArray[arrayIndex], arrayIndexP);
                   }
                   if (currKey == '2'){
                      userArray[arrayIndexP] = currKey;
                      Graphics_drawStringCentered(&g_sContext, dispThree, dispSz, 40, 55, OPAQUE_TEXT);
                      printf("Button 2 pressed\n");
                      printf("sequenceMax pressed 2 is: %d\n", sequenceMax);
                      arrayIndexP++;
                      printf("userArray is %c and arrayIndexP is %d\n ", userArray[arrayIndex], arrayIndexP);
                   }
                   if (currKey == '3'){
                       userArray[arrayIndexP] = currKey;
                       Graphics_drawStringCentered(&g_sContext, dispThree, dispSz, 60, 55, OPAQUE_TEXT);
                       printf("Button 3 pressed\n");
                       printf("sequenceMax pressed 3 is: %d\n", sequenceMax);
                       arrayIndexP++;
                       printf("userArray is %c and arrayIndexP is %d\n ", userArray[arrayIndex], arrayIndexP);
                   }
                   if (currKey == '4'){
                       userArray[arrayIndexP] = currKey;
                       Graphics_drawStringCentered(&g_sContext, dispThree, dispSz, 80, 55, OPAQUE_TEXT);
                       printf("Button 4 pressed\n");
                       printf("sequenceMax pressed 4 is: %d\n", sequenceMax);
                       arrayIndexP++;
                       printf("userArray is %c and arrayIndexP is %d\n ", userArray[arrayIndex], arrayIndexP);
                   }
                   if (currKey == '0'){
                      clearingPatternUserArrays();
                      printf("Button 0 pressed\n");
                      printf("sequenceMax pressed 0 is: %d\n", sequenceMax);
                      Graphics_drawStringCentered(&g_sContext, "YOU LOSE", AUTO_STRING_LENGTH, 48, 50, TRANSPARENT_TEXT); // restarting game
                      Graphics_drawStringCentered(&g_sContext, "Press '9'", AUTO_STRING_LENGTH, 48, 60, TRANSPARENT_TEXT);
                      Graphics_flushBuffer(&g_sContext);
                      swDelay(4);
                   }
                   if (currKey == '9'){
                      printf("Button 9 pressed\n");
                      printf("sequenceMax pressed 9 is: %d\n", sequenceMax);
                      Graphics_drawStringCentered(&g_sContext, "Press *", AUTO_STRING_LENGTH, 48, 50, TRANSPARENT_TEXT); // restarting game
                      Graphics_drawStringCentered(&g_sContext, "to begin", AUTO_STRING_LENGTH, 48, 60, TRANSPARENT_TEXT);
                      Graphics_flushBuffer(&g_sContext);
                      swDelay(4);
                      arrayIndex = 0; // resetting user Array Index
                      arrayIndexP = 0; // resetting player button Array Index
                      sequenceMax = 1; // resetting rounds
                   }
                   if (currKey == '*'){
                      printf("Button * pressed\n");
                      arrayIndex = 0; // resetting user Array Index
                      arrayIndexP = 0; // resetting player button Array Index
                      sequenceMax = 1; // resetting rounds
                   }


                   // Refresh the display so it shows the new data
                   Graphics_flushBuffer(&g_sContext);

                   BuzzerOn();
                   swDelay(2);
                   BuzzerOff();
                   setLeds(0);
                   Graphics_clearDisplay(&g_sContext); // Clear the display
                   Graphics_drawStringCentered(&g_sContext, "SIMON", AUTO_STRING_LENGTH, 48, 15, TRANSPARENT_TEXT);
                   Graphics_flushBuffer(&g_sContext);

               }


           }  // end while (1)

}


// functions start here

void swDelay(char numLoops)
{
    // This function is a software delay.

    volatile unsigned int i,j;  // volatile to prevent removal in optimization
                                // by compiler. Functionally this is useless code
    //int speed = 0;
    //speed = speed +100;
    for (j=0; j<numLoops; j++)
    {
        i = 50000 ;         // SW Delay
        while (i > 0)               // could also have used while (i)
           i--;
    }
}



void incPatternDisp () //generating random pattern array
{
    printf("IPD: BEFORE array index %d, sequenceMax %d, randomNum is %d\n", arrayIndex, sequenceMax, randomNum);
    for (arrayIndex = 0; arrayIndex < sequnceMax; arrayIndex++){ // clearing user array to reset each round
         userArray[arrayIndex] = '\0';
    }
    for (arrayIndex = 0; arrayIndex < sequenceMax; arrayIndex++){ // generating here
        randomNum = (rand() % 4) +1;
        if (randomNum == 1){
            patternArray[arrayIndex] = '1';
            Graphics_drawStringCentered(&g_sContext, "1", AUTO_STRING_LENGTH, 20, 55, TRANSPARENT_TEXT);
            setLeds('1' - 0x30);
            Graphics_flushBuffer(&g_sContext); // fresh
            BuzzerOn();
            swDelay(1);
            BuzzerOff();
            setLeds(0);
            Graphics_clearDisplay(&g_sContext); // clear
        }
        if (randomNum == 2){
            patternArray[arrayIndex] = '2';
            Graphics_drawStringCentered(&g_sContext, "2", AUTO_STRING_LENGTH, 40, 55, TRANSPARENT_TEXT);
            setLeds('2' - 0x30);
            Graphics_flushBuffer(&g_sContext); // refresh
            BuzzerOn();
            swDelay(1);
            BuzzerOff();
            setLeds(0);
            Graphics_clearDisplay(&g_sContext); // clear
        }
        if (randomNum == 3){
            patternArray[arrayIndex] = '3';
            Graphics_drawStringCentered(&g_sContext, "3", AUTO_STRING_LENGTH, 60, 55, TRANSPARENT_TEXT);
            setLeds('3' - 0x30);
            Graphics_flushBuffer(&g_sContext); // refresh
            BuzzerOn();
            swDelay(1);
            BuzzerOff();
            setLeds(0);
            Graphics_clearDisplay(&g_sContext); // clear
        }
        if (randomNum == 4){
            patternArray[arrayIndex] = '4';
            Graphics_drawStringCentered(&g_sContext, "4", AUTO_STRING_LENGTH, 80, 55, TRANSPARENT_TEXT);
            setLeds('4' - 0x30);
            Graphics_flushBuffer(&g_sContext); // refresh
            BuzzerOn();
            swDelay(1);
            BuzzerOff();
            setLeds(0);
            Graphics_clearDisplay(&g_sContext); // clear
        }
        printf("After sequenceMax %d IPD: in array index %d, randomNum is %d\n", sequenceMax, arrayIndex, randomNum);
        printf(" patternArray index %c\n",patternArray[arrayIndex]);
    }

}


void checkIfEqual() { // are arrays equal


}


void clearingPatternUserArrays() { // clearing the pattern and user arrays to restart
    printf("Before clearing arrays\n");
    for (arrayIndex = 0; arrayIndex < sequenceMax; arrayIndex++){
        printf("userArray is %c\n", userArray[arrayIndex]);
        printf("patternArray is %c\n", patternArray[arrayIndex]);
    }
    for (arrayIndex = 0; arrayIndex < sequenceMax; arrayIndex++){
        userArray[arrayIndex] = '\0'; // clearing user array
        patternArray[arrayIndex] = '\0'; // clearing random pattern array
    }
    printf("After clearing arrays\n");
    for (arrayIndex = 0; arrayIndex < sequenceMax; arrayIndex++){
        printf("userArray is %c\n ", userArray[arrayIndex]);
        printf("patternArray is %c\n ", patternArray[arrayIndex]);
    }
    printf("arrays are cleared\n");
}





/*void checkIfEqual() { // are arrays equal
      if ( (arrayLengthU == arrayLengthP) && (arrayLengthU != 0)) {
         for(arrayIndex = 0; arrayIndex<arrayLengthU; arrayIndex++) {
            if ((userArray[arrayIndex] == patternArray[arrayIndex])) { // if the arrays are equal
                cChecker=1;
            } else { // if the arrays are not equal
                cChecker = 0;
                clearingPatternUserArrays(); // clearing arrays to not confuse program
                break;
            }
         }
         for (arrayIndex = 0; arrayIndex < arrayLengthU; arrayIndex++){ // clearing array to reset
              userArray[arrayIndex] = '\0';
         }
         if (cChecker == 1) { // if arrays came back as equal
             sequenceMax++;
             cChecker = 2; // just setting to another value
             currKey = getKey();
             currKey = '*';
         } else if (cChecker == 0) { // if the arrays did not come back as equal
             cChecker = 2; // just setting to another value
             currKey = getKey();
             currKey = '9';
         }
      }
}*/
