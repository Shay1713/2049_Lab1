/************** ECE2049 Lab1 CODE ******************/
/**************  25 March 2023   ******************/
/***************************************************/

#include <msp430.h>
#include "peripherals.h"
#include <stdio.h>
#include <stdlib.h>

// Function Prototypes
void swDelay(char numLoops);

// Declare globals here



// Main
void main(void)

{
    int round; // how long the game 
    int arrayIndex; // the position in each array
    int sequenceMax; // max game length
    int numMax; // random limit in nums to pick
    int patternArray[] = {}; // random led pattern 
    int userArray[] = {}; saves user press button data

    unsigned char currKey=0, dispSz = 3;
    unsigned char dispThree[3];
    //unsigned char your_name[14] = "Max \n 

    WDTCTL = WDTPW | WDTHOLD;    // Stop watchdog timer. Always need to stop this!!


    initLeds();
    configDisplay();
    configKeypad();

    // *** Game Starting Screen ***
    Graphics_clearDisplay(&g_sContext); // Clear the display
    Graphics_drawStringCentered(&g_sContext, "SIMON", AUTO_STRING_LENGTH, 48, 15, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, "Press *", AUTO_STRING_LENGTH, 48, 25, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, "to begin", AUTO_STRING_LENGTH, 48, 35, TRANSPARENT_TEXT);

    //Graphics_Rectangle box = {.xMin = 5, .xMax = 91, .yMin = 5, .yMax = 91 };
    //Graphics_drawRectangle(&g_sContext, &box);

    Graphics_flushBuffer(&g_sContext);
    dispThree[0] = ' ';
    dispThree[2] = ' ';


    sequenceMax = 1; // generating pattern array
    numMax = 4;
    char alphabet[numMax] = { '1', '2', '3', '4');
    for (arrayIndex = 0; arrayIndex < sequenceMax; arrayIndex++)  
        userArray[sequenceMax] = alphabet[rand() % numMax];
    sequenceMax++;


        
     while (1)    // Forever loop
     {
               // Check if any keys have been pressed on the 3x4 keypad
               currKey = getKey();
               if (currKey == '8') // restart game & rounds
                   Graphics_drawStringCentered(&g_sContext, "SIMON", AUTO_STRING_LENGTH, 48, 15, TRANSPARENT_TEXT);
                   Graphics_drawStringCentered(&g_sContext, "Press *", AUTO_STRING_LENGTH, 48, 25, TRANSPARENT_TEXT);
                   Graphics_drawStringCentered(&g_sContext, "to begin", AUTO_STRING_LENGTH, 48, 35, TRANSPARENT_TEXT); 
                   round = 1;
               //if ((currKey >= '1') && (currKey <= '4')) // for the game LEDs
                   //setLeds(currKey - 0x30);
               if (currKey == '1')
                   Graphics_drawStringCentered(&g_sContext, dispThree, dispSz, 20, 55, OPAQUE_TEXT);
                   setLeds(currKey - 0x30);
               if (currKey == '2')
                  Graphics_drawStringCentered(&g_sContext, dispThree, dispSz, 40, 55, OPAQUE_TEXT);
                  setLeds(currKey - 0x30);
               if (currKey == '3')
                   Graphics_drawStringCentered(&g_sContext, dispThree, dispSz, 60, 55, OPAQUE_TEXT);
                   setLeds(currKey - 0x30);
               if (currKey == '4')
                   Graphics_drawStringCentered(&g_sContext, dispThree, dispSz, 80, 55, OPAQUE_TEXT);
                   setLeds(currKey - 0x30);
               if (currKey == '*')
                   Graphics_drawStringCentered(&g_sContext, "Get Ready", AUTO_STRING_LENGTH, 50, 15, TRANSPARENT_TEXT);
                   setLeds(currKey - 0x30);
                   swDelay(1);
                   Graphics_drawStringCentered(&g_sContext, "3", AUTO_STRING_LENGTH, 40, 55, TRANSPARENT_TEXT);
                   swDelay(1);
                   Graphics_drawStringCentered(&g_sContext, "2", AUTO_STRING_LENGTH, 60, 55, TRANSPARENT_TEXT);
                   swDelay(1);
                   Graphics_drawStringCentered(&g_sContext, "1", AUTO_STRING_LENGTH, 80, 55, TRANSPARENT_TEXT);


               if (currKey)
               {
                   dispThree[1] = currKey;

                   // Refresh the display so it shows the new data
                   Graphics_flushBuffer(&g_sContext);

                   BuzzerOn();
                   swDelay(1);
                   BuzzerOff();
                   setLeds(0);
                   Graphics_clearDisplay(&g_sContext); // Clear the display

               }

      }  // end while (1)


}


void swDelay(char numLoops)
{
	//  function is a software delay
	// Input: numLoops = number of delay loops to execute 

	volatile unsigned int i,j;	// volatile to prevent removal in optimization
	                            // by compiler. Functionally this is useless 

	for (j=0; j<numLoops; j++)
    {
	    i = 50000 ;			// SW Delay
   	    while (i > 0)				// could also have used while (i)
	       i--;
    }
}
