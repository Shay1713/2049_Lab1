/************** ECE2049 DEMO CODE ******************/
/**************  13 March 2019   ******************/
/***************************************************/

#include <msp430.h>

/* Peripherals.c and .h are where the functions that implement
 * the LEDs and keypad, etc are. It is often useful to organize
 * your code by putting like functions together in files.
 * You include the header associated with that file(s)
 * into the main file of your project. */
#include "peripherals.h"
#include <stdio.h>
#include <stdlib.h>

// Function Prototypes
void swDelay(char numLoops);
void incPatternDisp ();
void checkingOrder();

// Declare globals here

int round; // how long the game
int numMax = 4;
int arrayIndex; // the position in each array
int sequenceMax = 1; // max game length
int patternArray[] = {}; // random led pattern
int userArray[] = {}; //saves user press button data
unsigned char currKey=0, dispSz = 3;
unsigned char dispThree[3];
int c = 0;


// Main
void main(void)

{

    //unsigned char your_name[14] = "Max \n Shay";

    // Useful code starts here

    WDTCTL = WDTPW | WDTHOLD;    // Stop watchdog timer. Always need to stop this!!


    initLeds();
    configDisplay();
    configKeypad();

    // *** Intro Screen ***
    Graphics_clearDisplay(&g_sContext); // Clear the display
    Graphics_drawStringCentered(&g_sContext, "SIMON", AUTO_STRING_LENGTH, 48, 15, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, "Press *", AUTO_STRING_LENGTH, 48, 25, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, "to begin", AUTO_STRING_LENGTH, 48, 35, TRANSPARENT_TEXT);

    //Graphics_Rectangle box = {.xMin = 5, .xMax = 91, .yMin = 5, .yMax = 91 };
    //Graphics_drawRectangle(&g_sContext, &box);

    Graphics_flushBuffer(&g_sContext);
    dispThree[0] = ' ';
    dispThree[2] = ' ';


        while (1)    // Forever loop
           { Graphics_drawStringCentered(&g_sContext, "SIMON", AUTO_STRING_LENGTH, 48, 15, TRANSPARENT_TEXT);


               // Check if any keys have been pressed on the 3x4 keypad
               currKey = getKey();
               if (currKey == '*'){
                   (currKey = '3');
                   setLeds(currKey - 0x30);
                   swDelay(3);
                   (currKey = '2');
                   setLeds(currKey - 0x30);
                   swDelay(3);
                   (currKey = '1');
                   setLeds(currKey - 0x30);
                   swDelay(3);
               }
               if (currKey == '1')
                   setLeds(currKey - 0x30);
               if (currKey == '2')
                  setLeds(currKey - 0x30);
               if (currKey == '3')
                   setLeds(currKey - 0x30);
               if (currKey == '4')
                   setLeds(currKey - 0x30);
               if (currKey == '9')
                   setLeds(currKey - 0x30);
                   sequenceMax = 1;

               if (currKey)
               {
                   dispThree[1] = currKey;
                   if ((currKey >= '5') && (currKey <= '8'))
                       setLeds(0);
                   if (currKey == '1')
                       Graphics_drawStringCentered(&g_sContext, dispThree, dispSz, 20, 55, OPAQUE_TEXT);
                   if (currKey == '2')
                      Graphics_drawStringCentered(&g_sContext, dispThree, dispSz, 40, 55, OPAQUE_TEXT);
                   if (currKey == '3')
                       Graphics_drawStringCentered(&g_sContext, dispThree, dispSz, 60, 55, OPAQUE_TEXT);
                   if (currKey == '4')
                       Graphics_drawStringCentered(&g_sContext, dispThree, dispSz, 80, 55, OPAQUE_TEXT);
                   if (currKey == '9')
                       Graphics_drawStringCentered(&g_sContext, "Start Press '9'", AUTO_STRING_LENGTH, 48, 45, TRANSPARENT_TEXT);
                   if (currKey == '*')
                       Graphics_drawStringCentered(&g_sContext, "GO", AUTO_STRING_LENGTH, 30, 55, TRANSPARENT_TEXT);





                   // Refresh the display so it shows the new data
                   Graphics_flushBuffer(&g_sContext);

                   BuzzerOn();
                   swDelay(1);
                   BuzzerOff();
                   setLeds(0);
                   Graphics_clearDisplay(&g_sContext); // Clear the display


               }

           }  // end while (1)


}


void swDelay(char numLoops)
{
	// This function is a software delay.

	volatile unsigned int i,j;	// volatile to prevent removal in optimization
	                            // by compiler. Functionally this is useless code
	//int speed = 0;
	//speed = speed +100;
    //i = i-speed
	for (j=0; j<numLoops; j++)
    {
	    i = 50000 ;			// SW Delay
   	    while (i > 0)				// could also have used while (i)
	       i--;
    }
}

void incPatternDisp () //generating pattern array
{
    char alphabet[] = {'1', '2', '3', '4'};
    for (arrayIndex = 0; arrayIndex < sequenceMax; arrayIndex++)
        userArray[arrayIndex] = alphabet[rand() % numMax];
    sequenceMax++; // limiting how long the sequence is played, increments each winning round
}

void checkingOrder() // checking to see if the pattern and user arrays ==
{
    for(arrayIndex = 0; arrayIndex<round+1; arrayIndex++){
      if (patternArray[arrayIndex] == userArray[arrayIndex]){ // if arrays equal
          for(arrayIndex = 0; arrayIndex<round+1; arrayIndex++)
              userArray[arrayIndex] = 0; // clearing user button input array
          incPatternDisp (); // increasing pattern shown by 1
          round++;
          // instantly play another round & show round number
     } else { // if arrays not equal
        BuzzerOn();
        Graphics_drawStringCentered(&g_sContext, "Game Over", AUTO_STRING_LENGTH, 48, 15, TRANSPARENT_TEXT);
        Graphics_drawStringCentered(&g_sContext, "Press 9 To", AUTO_STRING_LENGTH, 48, 25, TRANSPARENT_TEXT);
        Graphics_drawStringCentered(&g_sContext, "Play Again", AUTO_STRING_LENGTH, 48, 25, TRANSPARENT_TEXT);
        round = 1;
        BuzzerOff();
      }
    }
 }



